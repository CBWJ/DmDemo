
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Frame.cshtml";
}

<div class="layui-row">
    <div class="layui-col-md6">
        姓名：
        <div class="layui-inline">
            <input type="text" id="txtName" class="layui-input" />
        </div>
        <button class="layui-btn" id="btnSearch">检索</button>
    </div>
    <div class="layui-col-md6">
        <button class="layui-btn layui-layout-right" id="btnAdd">新增</button>
    </div>
</div>
<table id="demo" lay-filter="test"></table>

<script type="text/html" id="barDemo">
    <a class="layui-btn layui-btn-primary layui-btn-xs" lay-event="detail">查看</a>
    <a class="layui-btn layui-btn-xs" lay-event="edit">编辑</a>
    <a class="layui-btn layui-btn-danger layui-btn-xs" lay-event="del">删除</a>
</script>
<script>
    layui.use('table', function () {
        var table = layui.table;

        //执行渲染
        table.render({
            elem: '#demo' //指定原始表格元素选择器（推荐id选择器）
            , id: 'dataTable'
          , height: 'full' //容器高度
            //,…… //更多参数参考右侧目录：基本参数选项
           , url: '@Url.Action("List", "Employee")/' //数据接口
           , page: true //开启分页
            , cols: [[
                { type: 'checkbox' } //开启复选框
              , { field: 'EMPLOYEE_ID', title: 'ID', width: 80, sort: true }
              , { field: 'EMPLOYEE_NAME', title: '用户名', width: 80 }
              , { field: 'IDENTITY_CARD', title: '省份证', width: 200 }
              , { field: 'EMAIL', title: '邮箱', width: 200 }
              , { field: 'HIRE_DATE', title: '入职日期', width: 200 }
              , { fixed: 'right', width: 200, align: 'center', toolbar: '#barDemo' }//绑定列工具条
            ]] //设置表头
            , parseData: function (res) { //res 即为原始返回的数据
                var obj = JSON.parse(res);
                return {
                    "code": obj.status, //解析接口状态
                    "msg": obj.message, //解析提示文本
                    "count": obj.total, //解析数据长度
                    "data": obj.data //解析数据列表
                };
            }
            , done: function (res, curr, count) {
                //如果是异步请求数据方式，res即为你接口返回的信息。
                //如果是直接赋值的方式，res即为：{data: [], count: 99} data为当前页数据、count为数据总长度
                console.log(res);

                //得到当前页码
                console.log(curr);

                //得到数据总量
                console.log(count);
            }
        });

        //监听工具条
        table.on('tool(test)', function (obj) { //注：tool是工具条事件名，test是table原始容器的属性 lay-filter="对应的值"
            var data = obj.data; //获得当前行数据
            var layEvent = obj.event; //获得 lay-event 对应的值（也可以是表头的 event 参数对应的值）
            var tr = obj.tr; //获得当前行 tr 的DOM对象

            if (layEvent === 'detail') { //查看
                layer.msg(JSON.stringify(data));
            } else if (layEvent === 'del') { //删除
                layer.confirm('真的删除行么', function (index) {
                    obj.del(); //删除对应行（tr）的DOM结构，并更新缓存
                    layer.close(index);
                    //向服务端发送删除指令
                });
            } else if (layEvent === 'edit') { //编辑
                //do something

                //同步更新缓存对应的值
                layer.alert('编辑行：<br>' + JSON.stringify(data))
            }
        });
        var $ = layui.$;
        $("#tab2").addClass("layui-this");

        $("#btnSearch").on("click", function () {
            table.reload('dataTable',//ID
                {
                    where: { //设定异步数据接口的额外参数，任意设
                        name: $("#txtName").val()
                    },
                    page: {
                        curr:1
                    }
                });
        });
    });
</script>
